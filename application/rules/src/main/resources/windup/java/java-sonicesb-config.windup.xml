<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:windup="http://www.jboss.org/schema/windup"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.jboss.org/schema/windup http://www.jboss.org/schema/windup.xsd">

    <windup:pipeline type="JAVA" id="java-sonicesb-migration-decorators">

        <windup:java-classification source-type="INHERITANCE" regex="com.sonicsw.xq.XQService"
            description="Sonic ESB Service">
            <windup:decorators>
                <windup:link
                    url="http://documentation.progress.com/output/Sonic/8.0.0/Docs8.0/api/esb_api/com/sonicsw/xq/XQService.html"
                    description="XQService Javadoc"/>
            </windup:decorators>
        </windup:java-classification>

    </windup:pipeline>


    <windup:java-hints id="java-sonicesb-migration-hints">
        <windup:java-hint source-type="INHERITANCE" regex="com.sonicsw.xq.XQService" effort="4">
			<![CDATA[
				Sonic ESB services inherit from XQService.  In Camel, this can be achieved through the simple Java Bean Camel Component.

				* [Camel Java Bean Component](http://camel.apache.org/bean.html)
			]]>
        </windup:java-hint>

        <windup:java-hint source-type="TYPE" regex="com.sonicsw.xq.XQServiceContext">
			<![CDATA[
				Sonic ESB services leverage the service(XQServiceContext context) method to implement business logic.  When messages are routed to the service, the service(XQServiceContext context) method is executed. 

				In Camel, this is achieved by routing messages to the Java Bean via the Camel Route's Bean Component syntax.

				* [Camel Java Bean Component](http://camel.apache.org/bean.html)
				* [Camel Binding Annotations](http://camel.apache.org/parameter-binding-annotations.html)

				Camel's Java Bean Component can leverage annotations annotations on the method to specify how Camel Message body values are mapped to the method parameters.  Additionally, the @Handler annotation can be leveraged to setup the default Java Bean method.

				**For example:**
				```java
				public void service(XQServiceContext ctx) throws XQServiceException {
					...
				}
				```

				**Should become:**

				```java
				@Handler
				public void service(@Header messageHeader, @Body messageBody, Exchange exchange) {
					...
				}
				```

				* org.apache.camel.Body
				* org.apache.camel.Header
				* org.apache.camel.Exchange

			]]>
        </windup:java-hint>



        <windup:java-hint source-type="TYPE" regex="com.sonicsw.xq.XQInitContext" effort="1">
			<![CDATA[
				The XQInitContext is used to receive initialization information for the service from Sonic ESB.

				This is not neccessary for Camel.  The init() method that receives this object should be replaced with Spring Bean property injection.  For initialization beyond propery injection, leverage Spring's @PostConstruct annotation on this init() method.
				
				* [Spring @PostConstruct Documentation](http://docs.spring.io/spring/docs/2.5.x/reference/beans.html#beans-postconstruct-and-predestroy-annotations)

				```java
				@PostConstruct
			    public void init() {
			        //leverage injected properties
			    }
				```
			]]>
        </windup:java-hint>
        <windup:java-hint source-type="METHOD" regex="com.sonicsw.xq.XQInitContext.getParameter" hint="Migrate to Spring property injection."/>
        <windup:java-hint source-type="METHOD" regex="com.sonicsw.xq.XQParameters.getParameter" hint="Migrate to Spring property injection."/>
        <windup:java-hint source-type="TYPE" regex="com.sonicsw.xq.XQParameters" hint="Migrate to Spring property injection."/>

        <windup:java-hint source-type="TYPE" regex="com.sonicsw.xq.XQParameterInfo" hint="Migrate to Spring property injection."/>

        <windup:java-hint source-type="TYPE" regex="com.sonicsw.xq.XQMessage$" hint="Migrate to org.apache.camel.Message"/>
        <windup:java-hint source-type="METHOD" regex="com.sonicsw.xq.XQMessage.getHeaderValue"
            hint="Migrate to org.apache.camel.Message.getHeader(String name)"/>

        <windup:java-hint source-type="METHOD" regex="com.sonicsw.xq.XQMessage.setHeaderValue"
            hint="Migrate to org.apache.camel.Message.setHeader(String name, Object value)"/>

        <windup:java-hint source-type="METHOD" regex="com.sonicsw.xq.XQMessage.getHeaderNames" hint="Migrate to org.apache.camel.Message.getHeaders()"/>

        <windup:java-hint source-type="TYPE" regex="com.sonicsw.xq.XQPart"
            hint="Migrate XQPart to an attachment on the org.apache.camel.Message"/>

        <windup:java-hint source-type="METHOD" regex="com.sonicsw.xq.XQMessage.getPartCount"
            hint="Migrate to org.apache.camel.Message.getAttachments().size()"/>

        <windup:java-hint source-type="METHOD" regex="com.sonicsw.xq.XQMessage.getPart\("
            hint="Migrate to org.apache.camel.Message.getAttachment(String id)"/>

        <windup:java-hint source-type="TYPE" regex="com.sonicsw.xq.XQLog" hint="Migrate to SLF4J."
            effort="1"/>

        <windup:java-hint source-type="TYPE" regex="com.sonicsw.xq.XQServiceException" effort="1">
			<![CDATA[
				Create a custom ServiceException class, extending Exception.  The documentation below explains exception handling in Camel.

				* [Camel Exception Handling](http://camel.apache.org/exception-clause.html)
			]]>
        </windup:java-hint>


        <windup:java-hint source-type="METHOD" regex="com.sonicsw.xq.XQMessage.getCorrelationId"
            effort="1">
			<![CDATA[
				Correlation is handled several ways in Camel.  Read the article below.

				* [Camel Exception Handling](http://camel.apache.org/correlation-identifier.html)
			]]>
        </windup:java-hint>


        <windup:java-hint source-type="METHOD" regex="com.sonicsw.xq.XQAddressFactory.createEndpointAddress"
            effort="3">
			<![CDATA[
				This indicates that the Sonic ESB Service is routing messages to a [1...N] endpoints.  To achieve this in Camel, take the business logic in the service, and populate a header property with an array of target enpoints.

				Next, create a Recipient List processor to route the message to N endpoints.

				* [Camel Recipient List](http://camel.apache.org/recipientlist-annotation.html)
			]]>
        </windup:java-hint>



        <windup:java-hint source-type="METHOD" regex="com.sonicsw.xq.XQServiceContext.addOutgoing"
            effort="1">
			<![CDATA[
				Sonic ESB uses the addOutgoing method to set the outgoing message. 

				This is achieved in Camel by either modifying the @Body parameter in the Java Bean Component method, or literally setting a new message to the Exchange.

				* [Camel Setting Response](http://camel.apache.org/using-getin-or-getout-methods-on-exchange.html)
			]]>
        </windup:java-hint>


        <windup:java-hint source-type="TYPE" regex="com.sonicsw.xq.XQEnvelope" hint="Migrate to org.apache.camel.Exchange"/>

        <windup:java-hint source-type="METHOD" regex="com.sonicsw.xq.XQEnvelope.getMessage"
            hint="Migrate to com.sonicsw.xq.XQEnvelope.getMessage.getIn()"/>

    </windup:java-hints>

</beans>